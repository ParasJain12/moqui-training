<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <!-- Service through entity-auto for product entity-->
    <service verb="create" noun="Product" type="entity-auto" >
        <in-parameters>
            <auto-parameters include="nonpk"/>
            <parameter name="product_id" required="true"/>
            <parameter name="product_name" required="true"/>
            <parameter name="color" required="true"/>
            <parameter name="size" required="true"/>
        </in-parameters>
        <out-parameters>
            <auto-parameters include="pk" required="true"/>
        </out-parameters>
    </service>

    <!--    Delete service for product entity-->
    <service verb="delete" noun="Product" type="entity-auto">
        <in-parameters>
            <auto-parameters include="pk" required="true" />
        </in-parameters>
    </service>

    <!--    Service to update/create a record in our product entity-->
    <service verb="store" noun="Product">
        <in-parameters>
            <parameter name="product_id" required="true"/>
            <parameter name="product_name"/>
            <parameter name="color"/>
            <parameter name="size"/>
        </in-parameters>
        <out-parameters>
            <parameter name="product_id"/>
        </out-parameters>
        <actions>
            <script>
                <![CDATA[
                // Fetch existing record by trainingID or trainingName
                def trainingRecord = ec.entity.find("moqui.product.Product")
                if (context.product_id) {
                    trainingRecord.condition("product_id", context.product_id)
                }
                trainingRecord = trainingRecord.one()

                if (trainingRecord) {
                    // Update existing record
                    trainingRecord.set("product_name", context.product_name)
                    trainingRecord.set("color", context.color)
                    trainingRecord.set("size", context.size)
                    trainingRecord.update()
                    context.product_id = trainingRecord.product_id
                } else {
                    // Create a new record
                    def newProduct_id = ec.entity.sequencedIdPrimary("moqui.product.Product", null, null)
                    ec.entity.makeValue("moqui.product.Product")
                        .set("product_id", newProduct_id)
                        .set("product_name", context.product_name)
                        .set("color", context.color)
                        .set("size", context.size)
                        .create()
                    context.product_id = newProduct_id
                }
            ]]>
            </script>
        </actions>
    </service>
</services>